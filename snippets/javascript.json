{
/*
	 // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Native Autonomous Custom Elements V1 in JS": {
		"prefix": "cea-js-v1",
		"description": "Autonomous Custom Elements V1 JS snippet",
		"body": [
			"window.customElements.define('$1', class $2 extends HTMLElement {",
			"  constructor () {",
			"    super(); // always call super() first in ctor.",
			"",
			"    this.is = '$1';",
			"",
			"    let shadowRoot = this.attachShadow({",
			"      mode: 'open',",
			"    });",
			"    const t = document.createElement('template');",
			"    t.innerHTML = `",
			"      <style>",
			"        :host {",
			"          display: block;",
			"          box-sizing: border-box;",
			"          position: relative;",
			"        }",
			"",
			"        * {",
			"          box-sizing: border-box;",
			"        }",
			"",
			"      </style>",
			"",
			"      $3",
			"    `;",
			"    const instance = t.content.cloneNode(true);",
			"",
			"    shadowRoot.appendChild(instance);",
			"  }",
			"",
			"  connectedCallback() {",
			"    $4",
			"  }",
			"",
			"  disconnectedCallback() {",
			"    $5",
			"  }",
			"",
			"  static get observedAttributes() {",
			"    return [",
			"      '$6',",
			"    ];",
			"  }",
			"",
			"  attributeChangedCallback(attrName, oldVal, newVal) {",
			"    $7",
			"  }",
			"",
			"});"
		]
	},

	"Native Extending Custom Element V1 in JS": {
		"prefix": "cee-js-v1",
		"description": "Extending Custom Element V1 JS snippet",
		"body": [
			"window.customElements.define('$1', class $2 extends $3 {",
			"  constructor () {",
			"    super(); // always call super() first in ctor.",
			"",
			"    this.is = '$1';",
			"",
			"    let shadowRoot = this.attachShadow({",
			"      mode: 'open',",
			"    });",
			"    const t = document.createElement('template');",
			"    t.innerHTML = `",
			"      <style>",
			"        :host {",
			"          display: block;",
			"          box-sizing: border-box;",
			"          position: relative;",
			"        }",
			"",
			"        * {",
			"          box-sizing: border-box;",
			"        }",
			"",
			"      </style>",
			"",
			"      $4",
			"    `;",
			"    const instance = t.content.cloneNode(true);",
			"",
			"    shadowRoot.appendChild(instance);",
			"  }",
			"",
			"  connectedCallback() {",
			"    $5",
			"  }",
			"",
			"  disconnectedCallback() {",
			"    $6",
			"  }",
			"",
			"  static get observedAttributes() {",
			"    return [",
			"      '$7',",
			"    ];",
			"  }",
			"",
			"  attributeChangedCallback(attrName, oldVal, newVal) {",
			"    $8",
			"  }",
			"",
			"});"
		]
	}
}